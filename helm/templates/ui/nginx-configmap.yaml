apiVersion: v1
kind: ConfigMap
metadata:
  name: ui-nginx-config
  namespace: {{ .Values.global.namespace }}
data:
  nginx.conf: |
    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml;
        application/javascript                js;
        application/javascript                mjs;
        application/json                      json;
        image/jpeg                            jpeg jpg;
        image/png                             png;
        image/gif                             gif;
        image/svg+xml                         svg svgz;
        image/x-icon                          ico;
        font/woff                             woff;
        font/woff2                            woff2;
    }

    map $http_origin $cors_origin {
        default "*";
        "~^https?://[^/]+\.local(:[0-9]+)?$" "$http_origin";
    }

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, PUT, POST, DELETE, PATCH, OPTIONS" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Headers "*" always;

        # Gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_min_length 1000;

        # Proxy API requests
        location /api {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://api:6000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle OPTIONS method for CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "GET, PUT, POST, DELETE, PATCH, OPTIONS" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # Handle static files
        location /assets/ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public, no-transform";
        }

        # Handle root path
        location = / {
            try_files /index.html =404;
            add_header Cache-Control "no-cache";
        }

        # Handle all other paths
        location / {
            try_files $uri $uri/ /index.html;
            expires -1;
        }

        # Disable favicon.ico logging
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # Disable robots.txt logging
        location = /robots.txt {
            log_not_found off;
            access_log off;
        }
    }